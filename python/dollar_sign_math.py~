"""
 * dollar-sign-math.py
 * Adam Shannon
 * 2010-02-10
 *
 * Copyright (c) 2010 Adam Shannon & Decaf Productions
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
"""

from random import random

class dollar_sign_math:
	def __init__(self):
		self.version = '0.4.0'
		self.e = 2.718281828459045235
		self.pi = 3.1415926535897932384626433
		self.i, self.k, self.total = 0,0,0
		
	def sum(self, numbs):
		self.total = numbs[0]
		for self.i in xrange(1,len(numbs)):
			self.total += numbs[self.i]
		return self.total
	
	def diff(self, numbs):
		self.total = numbs[0]
		for self.i in xrange(1,len(numbs)):
			self.total -= numbs[self.i]
		return self.total
		
	def product(self, numbs):
		self.total = numbs[0]
		for self.i in xrange(1,len(numbs)):
			self.total *= numbs[self.i]
		return self.total
	
	def quotient(self, numbs):
		self.total = numbs[0]
		for self.i in xrange(1,len(numbs)):
			self.total /= numbs[self.i]
		return self.total
		
	def mod(self, a,b):
		# This is supposed to return the sign
		# of the operand
		return a % b
		
	def _paddFront(self, value, times):
		value = str(value)
		for self.i in xrange(times):
			value = '0' + value
		return value
		
	def _paddEnd(self, value, times):
		value = str(value)
		for self.i in xrange(times):
			value += '0'
		return value
		
	def round(value, places, base):
		value = str(value).split('.');
		places = this.abs(place);
		
		value[1] = value[1] || '0';
		
		places = places || 2;
		base = base || 10;
		
		if (value[1].length < places) {
			value[1] = this._paddEnd(value[1], (places - value[1].length));
		}
		
		return value[0] + '.' + value[1].toString().substr(0, places);
